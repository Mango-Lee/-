   //生成验证码
        public string CreateCheckCode(HttpContext context)
        {
            int num;
            char code;
            string checkCode = string.Empty;
            Random random = new Random();
            for (int i = 0; i < 5; i++)
            {
                num = random.Next();
                if (num % 2 == 0)
                {
                    code = (char)('0' + (char)(num % 10));
                }
                else
                {
                    code = (char)('A' + (char)(num % 26));

                }
                checkCode += code.ToString();
            }

            HttpCookie _checkCode = new HttpCookie("CheckCode", checkCode);
            _checkCode.HttpOnly = true;
            context.Response.Cookies.Add(_checkCode);
            //context.Session["CheckCode"] = checkCode;
            return checkCode;

        }
        //生成验证码的图片
        public void CreateCheckCodeImage(string checkCode, HttpContext context)
        {
           
            if (checkCode==null||checkCode.Trim()==string.Empty)
            {
                return;
            }
            Bitmap image = new Bitmap((int)Math.Ceiling(checkCode.Length * 12.5), 22);
            Graphics g = Graphics.FromImage(image);
            try
            {
               
                Random radom=new Random();
                g.Clear(Color.White);
                //画图片的噪音线
              for (int i = 0; i < 25; i++)
			{
			int x1 =radom.Next(image.Width);
			int x2=radom.Next(image.Width);
			int y1=radom.Next(image.Height);
			int y2=radom.Next(image.Height);
            using (Pen pen = new Pen(Color.Silver))
            {
                g.DrawRectangle(pen, x1, y1, x2, y2);
            }

			}
                Font font=new System.Drawing.Font("Arial",12,System.Drawing.FontStyle.Bold|System.Drawing.FontStyle.Italic);
                LinearGradientBrush brush=new LinearGradientBrush(new Rectangle(5,5,image.Width,image.Height),Color.Blue,Color.DarkRed, 1.2f,true);
                g.DrawString(checkCode,font,brush,2,2);
                font.Dispose();
                brush.Dispose();
                //画图片的前景噪音点
                for (int i = 0; i < 100; i++)
			{
			 int x=radom.Next(image.Width);
			 int y=radom.Next(image.Height);
             image.SetPixel(x,y,Color.FromArgb(radom.Next()));
			}
                //画图片的边框线
                using(Pen pen=new Pen(Color.Silver))
	{
		  g.DrawRectangle(pen, 0, 0, image.Width - 1, image.Height - 1);

	}
                MemoryStream ms=new MemoryStream();
                image.Save(ms,System.Drawing.Imaging.ImageFormat.Gif);
                context.Response.ContentType="image/Gif";
                context.Response.BinaryWrite(ms.ToArray());

            }
            catch 
            {
              
            }
            finally{
            g.Dispose();
            image.Dispose();
            
            }
        
        }
        private bool load_Imge_Click(string code, HttpContext context)
        {

            if (context.Session["CheckCode"] != null)
            {
                if (context.Session["CheckCode"].ToString().ToUpper() == code.ToUpper())
                //这样写可以不区分大小写
                {
                    return true;

                }
                else
                {
                    return false;
                }
            }
            else return false;
        }
